/**
 * Ingestion Routes
 * 
 * This module handles all routes related to document ingestion,
 * including uploading new documents and storing them with unique identifiers.
 * It implements the new Ingestion Service requirements (ING specifications).
 */
import { Router, Request, Response } from "express";
import multer from "multer";
import path from "path";
import { v4 as uuidv4 } from 'uuid';
import fsPromises from 'fs/promises';

// Setup ingestion directory
const ingestDataDirRoot = path.join(process.cwd(), "data");
const ingestDir = path.join(ingestDataDirRoot, "ingest");

// Ensure ingestDir directory exists for the new ingestion service
(async () => {
  try {
    await fsPromises.mkdir(ingestDir, { recursive: true });
    console.log(`Directory ${ingestDir} created or already exists for ingestion service.`);
  } catch (error) {
    console.error(`Error creating directory ${ingestDir}:`, error);
  }
})();

// New multer configuration for the Ingestion Service
const ingestionFileStorageConfig = multer.diskStorage({
  destination: async (req: any, file, cb) => {
    // Generate a completely new UUID for each upload with a timestamp component for uniqueness
    const timestamp = new Date().getTime();
    req.document_id_uuid = `${uuidv4()}-${timestamp}`;
    console.log(`✅ Generated UNIQUE UUID for upload: ${req.document_id_uuid}`);
    console.log(`📌 Timestamp component: ${timestamp}`);
    
    const documentSpecificIngestPath = path.join(ingestDir, req.document_id_uuid);
    console.log(`📂 Creating directory: ${documentSpecificIngestPath}`);
    
    try {
      await fsPromises.mkdir(documentSpecificIngestPath, { recursive: true });
      console.log(`✅ Directory created successfully: ${documentSpecificIngestPath}`);
      cb(null, documentSpecificIngestPath);
    } catch (error: any) {
      console.error('❌ Error creating ingestion destination path:', error);
      cb(error, '');
    }
  },
  filename: (req, file, cb) => {
    // Preserve the original filename instead of renaming to "original.pdf"
    const originalName = Buffer.from(file.originalname, 'latin1').toString('utf8');
    
    // Sanitize filename to ensure it's valid (remove problematic characters)
    let sanitizedName = originalName.replace(/[/\\?%*:|"<>]/g, '-');
    
    console.log(`📄 Original filename: ${originalName}`);
    console.log(`📄 Saving with sanitized name: ${sanitizedName}`);
    
    cb(null, sanitizedName);
  },
});

// Upload middleware instance for the Ingestion Service
const ingestionServiceUpload = multer({
  storage: ingestionFileStorageConfig,
  limits: {
    fileSize: 20 * 1024 * 1024, // 20MB limit
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = [
      "application/pdf",
      "image/jpeg",
      "image/png",
      "image/tiff",
    ];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      // Return HTTP 400 as per ING-F5 (error handling in route will set status code)
      cb(new Error("Invalid file type. Only PDF, JPEG, PNG, and TIFF are allowed for ingestion service."));
    }
  },
});

const router = Router();

// Upload a new document - This is the Ingestion Service endpoint
router.post("/documents", ingestionServiceUpload.single("file"), async (req: Request, res: Response) => {
  try {
    console.log("Received upload request to /api/v1/documents");
    
    if (!req.file) {
      console.log("No file uploaded in request");
      return res.status(400).json({ message: "No file uploaded." });
    }

    const documentIdUUID = (req as any).document_id_uuid; // UUID generated by Multer config
    const filePath = req.file.path;
    
    console.log(`Processing file upload with UUID: ${documentIdUUID}`);
    console.log(`File saved to: ${filePath}`);
    console.log(`Original filename: ${req.file.originalname}, Size: ${req.file.size}, Type: ${req.file.mimetype}`);

    const documentToPersist = {
      uuid: documentIdUUID,
      originalFilename: Buffer.from(req.file.originalname, 'latin1').toString('utf8'),
      fileSize: req.file.size,
      fileType: req.file.mimetype,
      status: "RECEIVED", // ING-F4 status
      storagePath: filePath,
    };
    console.log("Simulated DB Save for Ingestion Service:", documentToPersist);
    // Example: const dbRecord = await storage.createIngestionDocument(documentToPersist);

    // ING-F7: Synchronous HTTP call to Classification Service (Mocked for now)
    const classificationServiceUrl = process.env.CLASSIFICATION_SERVICE_URL || "http://localhost:5001/classify";
    const classificationPayload = { document_id: documentIdUUID, file_path: filePath };
    console.log(`Mocking: Calling Classification Service at ${classificationServiceUrl} with payload:`, classificationPayload);
    
    // ING-F4 response format
    return res.status(201).json({ document_id: documentIdUUID, status: "RECEIVED" });

  } catch (error: any) {
    console.error("Error in /api/v1/documents (Ingestion Service):", error);
    if (error instanceof multer.MulterError) {
      // Handle Multer specific errors (e.g., file too large)
      return res.status(400).json({ message: error.message, error_code: "UPLOAD_ERROR" });
    }
    if (error.message.includes("Invalid file type")) { // From our custom fileFilter
      return res.status(400).json({ message: error.message, error_code: "UNSUPPORTED_MEDIA" });
    }
    // Generic error
    return res.status(500).json({ message: "Failed to ingest document due to an internal error." });
  }
});

export default router; 